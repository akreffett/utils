#MAEC Malware Action Class

#Copyright (c) 2012, The MITRE Corporation
#All rights reserved.

#Compatible with MAEC v3.0
#Last updated 12/27/2012

import maec_bundle_3_0 as maecbundle

class malware_action:
    def __init__(self, generator, action_attributes_dict = None):
        self.generator = generator
        #Create the action type and add basic attributes
        self.action = maecbundle.MalwareActionType()
        self.action.set_id(self.generator.generate_act_id())
        self.associated_objects = maecbundle.cybox_core_1_0.AssociatedObjectsType()
        self.action_attributes_dict = action_attributes_dict
        self.__associated_objects = maecbundle.cybox_core_1_0.AssociatedObjectsType()

    #Build the Action from the input dictionary
    def build_from_dictionary(self):
        for key, value in self.action_attributes_dict.items():
            if key == 'undefined_name':
                self.action.set_undefined_name(value)
            elif key == 'name':
                self.action.set_name(value)
            elif key == 'id':
                self.action.set_id(value)
            elif key == 'idref':
                self.action.set_idref(value)
            elif key == 'ordinal_position':
                self.action.set_ordinal_position(value)
            elif key == 'context':
                self.action.set_context(value)
            elif key == 'network_protocol':
                self.action.set_network_protocol(value)
            elif key == 'action_status':
                self.action.set_action_status(value)
            elif key == 'timestamp':
                self.action.set_timestamp(value)
            elif key == 'type':
                if value.count('/') > 0:
                    self.action.set_type(value)
                else:
                    self.action.set_type(value.capitalize())
            elif key == 'associated_objects':
                for associated_object in value:
                    if associated_object is not None: self.__associated_objects.add_Associated_Object(value)
            elif key == 'object':
                if value is not None and value.hasContent_():
                    self.__associated_objects.add_Associated_Object(value)
            elif key == 'object_old':
                if value is not None and value.hasContent_():
                    self.__associated_objects.add_Associated_Object(value)
            elif key == 'object_new':
                if value is not None and value.hasContent_():
                    self.__associated_objects.add_Associated_Object(value)
            #elif key == 'tool_id':
            #    discovery_method = maec.common.MeasureSourceType()
            #    tools = maec.common.ToolsInformationType()
            #    tool=maec.common.ToolInformationType(idref=value)
            #    tools.add_Tool(tool)
            #    discovery_method.set_Tools(tools)
            #    action.set_Discovery_Method(discovery_method)
            elif key == 'action_arguments':
                action_arguments = maecbundle.cybox_core_1_0.ActionArgumentsType()
                for argument in value:
                    action_argument = maecbundle.cybox_core_1_0.ActionArgumentType()
                    for key, value in argument.items():
                        if key == 'defined_argument_name':
                            action_argument.set_defined_argument_name(value)
                        elif key == 'undefined_argument_name':
                            action_argument.set_undefined_argument_name(value)
                        elif key == 'argument_value':
                            action_argument.set_argument_value(value)
                    action_arguments.add_Action_Argument(action_argument)
                if action_arguments.hasContent_():
                    self.action.set_Action_Arguments(action_arguments)

        if self.__associated_objects.hasContent_():
            self.action.set_Associated_Objects(associated_objects)

    #Getter methods
    def get(self):
        return self.action
